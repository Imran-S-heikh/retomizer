
    Rule {
            matcher: "Ai",
            name: "Align items",
            param_tovalue: false,
            styles: Style::mapped([("align-items", "${0}")]),
            arguments: Some(HashMap::from([
                ("b", "baseline"),("c", "center"),("e", "end"),("fe", "flex-end"),("fs", "flex-start"),("n", "normal"),("s", "start"),("se", "self-end"),("ss", "self-start"),("st", "stretch")
            ])),
    },
    Rule {
            matcher: "Ac",
            name: "Align content",
            param_tovalue: false,
            styles: Style::mapped([("align-content", "${0}")]),
            arguments: Some(HashMap::from([
                ("b", "baseline"),("c", "center"),("e", "end"),("fe", "flex-end"),("fs", "flex-start"),("n", "normal"),("s", "start"),("sa", "space-around"),("sb", "space-between"),("se", "space-evenly"),("st", "stretch")
            ])),
    },
    Rule {
            matcher: "As",
            name: "Align self",
            param_tovalue: false,
            styles: Style::mapped([("align-self", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("b", "baseline"),("c", "center"),("e", "end"),("fe", "flex-end"),("fs", "flex-start"),("n", "normal"),("s", "start"),("se", "self-end"),("ss", "self-start"),("st", "stretch")
            ])),
    },
    Rule {
            matcher: "Anim",
            name: "Animation",
            param_tovalue: true,
            styles: Style::mapped([("animation", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Animdel",
            name: "Animation delay",
            param_tovalue: true,
            styles: Style::mapped([("animation-delay", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Animdir",
            name: "Animation direction",
            param_tovalue: false,
            styles: Style::mapped([("animation-direction", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "alternate"),("ar", "alternate-reverse"),("n", "normal"),("r", "reverse")
            ])),
    },
    Rule {
            matcher: "Animdur",
            name: "Animation duration",
            param_tovalue: true,
            styles: Style::mapped([("animation-duration", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Animfm",
            name: "Animation fill mode",
            param_tovalue: false,
            styles: Style::mapped([("animation-fill-mode", "${0}")]),
            arguments: Some(HashMap::from([
                ("b", "backwards"),("bo", "both"),("f", "forwards"),("n", "none")
            ])),
    },
    Rule {
            matcher: "Animic",
            name: "Animation iteration count",
            param_tovalue: true,
            styles: Style::mapped([("animation-iteration-count", "${0}")]),
            arguments: Some(HashMap::from([
                ("i", "infinite")
            ])),
    },
    Rule {
            matcher: "Animn",
            name: "Animation name",
            param_tovalue: true,
            styles: Style::mapped([("animation-name", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none")
            ])),
    },
    Rule {
            matcher: "Animps",
            name: "Animation play state",
            param_tovalue: false,
            styles: Style::mapped([("animation-play-state", "${0}")]),
            arguments: Some(HashMap::from([
                ("p", "paused"),("r", "running")
            ])),
    },
    Rule {
            matcher: "Animtf",
            name: "Animation timing function",
            param_tovalue: false,
            styles: Style::mapped([("animation-timing-function", "${0}")]),
            arguments: Some(HashMap::from([
                ("e", "ease"),("ei", "ease-in"),("eo", "ease-out"),("eio", "ease-in-out"),("l", "linear"),("se", "step-end"),("ss", "step-start")
            ])),
    },
    Rule {
            matcher: "Ap",
            name: "Appearance",
            param_tovalue: false,
            styles: Style::mapped([("appearance", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("n", "none")
            ])),
    },
    Rule {
            matcher: "Ar",
            name: "Aspect ratio",
            param_tovalue: false,
            styles: Style::mapped([("aspect-ratio", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bd",
            name: "Border",
            param_tovalue: false,
            styles: Style::mapped([("border", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("n", "none")
            ])),
    },
    Rule {
            matcher: "Bdx",
            name: "Border X",
            param_tovalue: false,
            styles: Style::mapped([("border-left", "${0}"),("border-right", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bdy",
            name: "Border Y",
            param_tovalue: false,
            styles: Style::mapped([("border-top", "${0}"),("border-bottom", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bdt",
            name: "Border top",
            param_tovalue: false,
            styles: Style::mapped([("border-top", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bdend",
            name: "Border end",
            param_tovalue: false,
            styles: Style::mapped([("border-right", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bdb",
            name: "Border bottom",
            param_tovalue: false,
            styles: Style::mapped([("border-bottom", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bdstart",
            name: "Border start",
            param_tovalue: false,
            styles: Style::mapped([("border-left", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bdc",
            name: "Border color",
            param_tovalue: true,
            styles: Style::mapped([("border-color", "${0}")]),
            arguments: Some(HashMap::from([
                ("t", "transparent"),("cc", "currentColor"),("n", "none"),("aliceblue", "aliceblue"),("antiquewhite", "antiquewhite"),("aqua", "aqua"),("aquamarine", "aquamarine"),("azure", "azure"),("beige", "beige"),("bisque", "bisque"),("black", "black"),("blanchedalmond", "blanchedalmond"),("blue", "blue"),("blueviolet", "blueviolet"),("brown", "brown"),("burlywood", "burlywood"),("cadetblue", "cadetblue"),("chartreuse", "chartreuse"),("chocolate", "chocolate"),("coral", "coral"),("cornflowerblue", "cornflowerblue"),("cornsilk", "cornsilk"),("crimson", "crimson"),("cyan", "cyan"),("darkblue", "darkblue"),("darkcyan", "darkcyan"),("darkgoldenrod", "darkgoldenrod"),("darkgray", "darkgray"),("darkgreen", "darkgreen"),("darkgrey", "darkgrey"),("darkkhaki", "darkkhaki"),("darkmagenta", "darkmagenta"),("darkolivegreen", "darkolivegreen"),("darkorange", "darkorange"),("darkorchid", "darkorchid"),("darkred", "darkred"),("darksalmon", "darksalmon"),("darkseagreen", "darkseagreen"),("darkslateblue", "darkslateblue"),("darkslategray", "darkslategray"),("darkslategrey", "darkslategrey"),("darkturquoise", "darkturquoise"),("darkviolet", "darkviolet"),("deeppink", "deeppink"),("deepskyblue", "deepskyblue"),("dimgray", "dimgray"),("dimgrey", "dimgrey"),("dodgerblue", "dodgerblue"),("firebrick", "firebrick"),("floralwhite", "floralwhite"),("forestgreen", "forestgreen"),("fuchsia", "fuchsia"),("gainsboro", "gainsboro"),("ghostwhite", "ghostwhite"),("gold", "gold"),("goldenrod", "goldenrod"),("gray", "gray"),("green", "green"),("greenyellow", "greenyellow"),("grey", "grey"),("honeydew", "honeydew"),("hotpink", "hotpink"),("indianred", "indianred"),("indigo", "indigo"),("ivory", "ivory"),("khaki", "khaki"),("lavender", "lavender"),("lavenderblush", "lavenderblush"),("lawngreen", "lawngreen"),("lemonchiffon", "lemonchiffon"),("lightblue", "lightblue"),("lightcoral", "lightcoral"),("lightcyan", "lightcyan"),("lightgoldenrodyellow", "lightgoldenrodyellow"),("lightgray", "lightgray"),("lightgreen", "lightgreen"),("lightgrey", "lightgrey"),("lightpink", "lightpink"),("lightsalmon", "lightsalmon"),("lightseagreen", "lightseagreen"),("lightskyblue", "lightskyblue"),("lightslategray", "lightslategray"),("lightslategrey", "lightslategrey"),("lightsteelblue", "lightsteelblue"),("lightyellow", "lightyellow"),("lime", "lime"),("limegreen", "limegreen"),("linen", "linen"),("magenta", "magenta"),("maroon", "maroon"),("mediumaquamarine", "mediumaquamarine"),("mediumblue", "mediumblue"),("mediumorchid", "mediumorchid"),("mediumpurple", "mediumpurple"),("mediumseagreen", "mediumseagreen"),("mediumslateblue", "mediumslateblue"),("mediumspringgreen", "mediumspringgreen"),("mediumturquoise", "mediumturquoise"),("mediumvioletred", "mediumvioletred"),("midnightblue", "midnightblue"),("mintcream", "mintcream"),("mistyrose", "mistyrose"),("moccasin", "moccasin"),("navajowhite", "navajowhite"),("navy", "navy"),("oldlace", "oldlace"),("olive", "olive"),("olivedrab", "olivedrab"),("orange", "orange"),("orangered", "orangered"),("orchid", "orchid"),("palegoldenrod", "palegoldenrod"),("palegreen", "palegreen"),("paleturquoise", "paleturquoise"),("palevioletred", "palevioletred"),("papayawhip", "papayawhip"),("peachpuff", "peachpuff"),("peru", "peru"),("pink", "pink"),("plum", "plum"),("powderblue", "powderblue"),("purple", "purple"),("red", "red"),("rosybrown", "rosybrown"),("royalblue", "royalblue"),("saddlebrown", "saddlebrown"),("salmon", "salmon"),("sandybrown", "sandybrown"),("seagreen", "seagreen"),("seashell", "seashell"),("sienna", "sienna"),("silver", "silver"),("skyblue", "skyblue"),("slateblue", "slateblue"),("slategray", "slategray"),("slategrey", "slategrey"),("snow", "snow"),("springgreen", "springgreen"),("steelblue", "steelblue"),("tan", "tan"),("teal", "teal"),("thistle", "thistle"),("tomato", "tomato"),("turquoise", "turquoise"),("violet", "violet"),("wheat", "wheat"),("white", "white"),("whitesmoke", "whitesmoke"),("yellow", "yellow"),("yellowgreen", "yellowgreen")
            ])),
    },
    Rule {
            matcher: "Bdtc",
            name: "Border top color",
            param_tovalue: true,
            styles: Style::mapped([("border-top-color", "${0}")]),
            arguments: Some(HashMap::from([
                ("t", "transparent"),("cc", "currentColor"),("n", "none"),("aliceblue", "aliceblue"),("antiquewhite", "antiquewhite"),("aqua", "aqua"),("aquamarine", "aquamarine"),("azure", "azure"),("beige", "beige"),("bisque", "bisque"),("black", "black"),("blanchedalmond", "blanchedalmond"),("blue", "blue"),("blueviolet", "blueviolet"),("brown", "brown"),("burlywood", "burlywood"),("cadetblue", "cadetblue"),("chartreuse", "chartreuse"),("chocolate", "chocolate"),("coral", "coral"),("cornflowerblue", "cornflowerblue"),("cornsilk", "cornsilk"),("crimson", "crimson"),("cyan", "cyan"),("darkblue", "darkblue"),("darkcyan", "darkcyan"),("darkgoldenrod", "darkgoldenrod"),("darkgray", "darkgray"),("darkgreen", "darkgreen"),("darkgrey", "darkgrey"),("darkkhaki", "darkkhaki"),("darkmagenta", "darkmagenta"),("darkolivegreen", "darkolivegreen"),("darkorange", "darkorange"),("darkorchid", "darkorchid"),("darkred", "darkred"),("darksalmon", "darksalmon"),("darkseagreen", "darkseagreen"),("darkslateblue", "darkslateblue"),("darkslategray", "darkslategray"),("darkslategrey", "darkslategrey"),("darkturquoise", "darkturquoise"),("darkviolet", "darkviolet"),("deeppink", "deeppink"),("deepskyblue", "deepskyblue"),("dimgray", "dimgray"),("dimgrey", "dimgrey"),("dodgerblue", "dodgerblue"),("firebrick", "firebrick"),("floralwhite", "floralwhite"),("forestgreen", "forestgreen"),("fuchsia", "fuchsia"),("gainsboro", "gainsboro"),("ghostwhite", "ghostwhite"),("gold", "gold"),("goldenrod", "goldenrod"),("gray", "gray"),("green", "green"),("greenyellow", "greenyellow"),("grey", "grey"),("honeydew", "honeydew"),("hotpink", "hotpink"),("indianred", "indianred"),("indigo", "indigo"),("ivory", "ivory"),("khaki", "khaki"),("lavender", "lavender"),("lavenderblush", "lavenderblush"),("lawngreen", "lawngreen"),("lemonchiffon", "lemonchiffon"),("lightblue", "lightblue"),("lightcoral", "lightcoral"),("lightcyan", "lightcyan"),("lightgoldenrodyellow", "lightgoldenrodyellow"),("lightgray", "lightgray"),("lightgreen", "lightgreen"),("lightgrey", "lightgrey"),("lightpink", "lightpink"),("lightsalmon", "lightsalmon"),("lightseagreen", "lightseagreen"),("lightskyblue", "lightskyblue"),("lightslategray", "lightslategray"),("lightslategrey", "lightslategrey"),("lightsteelblue", "lightsteelblue"),("lightyellow", "lightyellow"),("lime", "lime"),("limegreen", "limegreen"),("linen", "linen"),("magenta", "magenta"),("maroon", "maroon"),("mediumaquamarine", "mediumaquamarine"),("mediumblue", "mediumblue"),("mediumorchid", "mediumorchid"),("mediumpurple", "mediumpurple"),("mediumseagreen", "mediumseagreen"),("mediumslateblue", "mediumslateblue"),("mediumspringgreen", "mediumspringgreen"),("mediumturquoise", "mediumturquoise"),("mediumvioletred", "mediumvioletred"),("midnightblue", "midnightblue"),("mintcream", "mintcream"),("mistyrose", "mistyrose"),("moccasin", "moccasin"),("navajowhite", "navajowhite"),("navy", "navy"),("oldlace", "oldlace"),("olive", "olive"),("olivedrab", "olivedrab"),("orange", "orange"),("orangered", "orangered"),("orchid", "orchid"),("palegoldenrod", "palegoldenrod"),("palegreen", "palegreen"),("paleturquoise", "paleturquoise"),("palevioletred", "palevioletred"),("papayawhip", "papayawhip"),("peachpuff", "peachpuff"),("peru", "peru"),("pink", "pink"),("plum", "plum"),("powderblue", "powderblue"),("purple", "purple"),("red", "red"),("rosybrown", "rosybrown"),("royalblue", "royalblue"),("saddlebrown", "saddlebrown"),("salmon", "salmon"),("sandybrown", "sandybrown"),("seagreen", "seagreen"),("seashell", "seashell"),("sienna", "sienna"),("silver", "silver"),("skyblue", "skyblue"),("slateblue", "slateblue"),("slategray", "slategray"),("slategrey", "slategrey"),("snow", "snow"),("springgreen", "springgreen"),("steelblue", "steelblue"),("tan", "tan"),("teal", "teal"),("thistle", "thistle"),("tomato", "tomato"),("turquoise", "turquoise"),("violet", "violet"),("wheat", "wheat"),("white", "white"),("whitesmoke", "whitesmoke"),("yellow", "yellow"),("yellowgreen", "yellowgreen")
            ])),
    },
    Rule {
            matcher: "Bdendc",
            name: "Border end color",
            param_tovalue: true,
            styles: Style::mapped([("border-right-color", "${0}")]),
            arguments: Some(HashMap::from([
                ("t", "transparent"),("cc", "currentColor"),("n", "none"),("aliceblue", "aliceblue"),("antiquewhite", "antiquewhite"),("aqua", "aqua"),("aquamarine", "aquamarine"),("azure", "azure"),("beige", "beige"),("bisque", "bisque"),("black", "black"),("blanchedalmond", "blanchedalmond"),("blue", "blue"),("blueviolet", "blueviolet"),("brown", "brown"),("burlywood", "burlywood"),("cadetblue", "cadetblue"),("chartreuse", "chartreuse"),("chocolate", "chocolate"),("coral", "coral"),("cornflowerblue", "cornflowerblue"),("cornsilk", "cornsilk"),("crimson", "crimson"),("cyan", "cyan"),("darkblue", "darkblue"),("darkcyan", "darkcyan"),("darkgoldenrod", "darkgoldenrod"),("darkgray", "darkgray"),("darkgreen", "darkgreen"),("darkgrey", "darkgrey"),("darkkhaki", "darkkhaki"),("darkmagenta", "darkmagenta"),("darkolivegreen", "darkolivegreen"),("darkorange", "darkorange"),("darkorchid", "darkorchid"),("darkred", "darkred"),("darksalmon", "darksalmon"),("darkseagreen", "darkseagreen"),("darkslateblue", "darkslateblue"),("darkslategray", "darkslategray"),("darkslategrey", "darkslategrey"),("darkturquoise", "darkturquoise"),("darkviolet", "darkviolet"),("deeppink", "deeppink"),("deepskyblue", "deepskyblue"),("dimgray", "dimgray"),("dimgrey", "dimgrey"),("dodgerblue", "dodgerblue"),("firebrick", "firebrick"),("floralwhite", "floralwhite"),("forestgreen", "forestgreen"),("fuchsia", "fuchsia"),("gainsboro", "gainsboro"),("ghostwhite", "ghostwhite"),("gold", "gold"),("goldenrod", "goldenrod"),("gray", "gray"),("green", "green"),("greenyellow", "greenyellow"),("grey", "grey"),("honeydew", "honeydew"),("hotpink", "hotpink"),("indianred", "indianred"),("indigo", "indigo"),("ivory", "ivory"),("khaki", "khaki"),("lavender", "lavender"),("lavenderblush", "lavenderblush"),("lawngreen", "lawngreen"),("lemonchiffon", "lemonchiffon"),("lightblue", "lightblue"),("lightcoral", "lightcoral"),("lightcyan", "lightcyan"),("lightgoldenrodyellow", "lightgoldenrodyellow"),("lightgray", "lightgray"),("lightgreen", "lightgreen"),("lightgrey", "lightgrey"),("lightpink", "lightpink"),("lightsalmon", "lightsalmon"),("lightseagreen", "lightseagreen"),("lightskyblue", "lightskyblue"),("lightslategray", "lightslategray"),("lightslategrey", "lightslategrey"),("lightsteelblue", "lightsteelblue"),("lightyellow", "lightyellow"),("lime", "lime"),("limegreen", "limegreen"),("linen", "linen"),("magenta", "magenta"),("maroon", "maroon"),("mediumaquamarine", "mediumaquamarine"),("mediumblue", "mediumblue"),("mediumorchid", "mediumorchid"),("mediumpurple", "mediumpurple"),("mediumseagreen", "mediumseagreen"),("mediumslateblue", "mediumslateblue"),("mediumspringgreen", "mediumspringgreen"),("mediumturquoise", "mediumturquoise"),("mediumvioletred", "mediumvioletred"),("midnightblue", "midnightblue"),("mintcream", "mintcream"),("mistyrose", "mistyrose"),("moccasin", "moccasin"),("navajowhite", "navajowhite"),("navy", "navy"),("oldlace", "oldlace"),("olive", "olive"),("olivedrab", "olivedrab"),("orange", "orange"),("orangered", "orangered"),("orchid", "orchid"),("palegoldenrod", "palegoldenrod"),("palegreen", "palegreen"),("paleturquoise", "paleturquoise"),("palevioletred", "palevioletred"),("papayawhip", "papayawhip"),("peachpuff", "peachpuff"),("peru", "peru"),("pink", "pink"),("plum", "plum"),("powderblue", "powderblue"),("purple", "purple"),("red", "red"),("rosybrown", "rosybrown"),("royalblue", "royalblue"),("saddlebrown", "saddlebrown"),("salmon", "salmon"),("sandybrown", "sandybrown"),("seagreen", "seagreen"),("seashell", "seashell"),("sienna", "sienna"),("silver", "silver"),("skyblue", "skyblue"),("slateblue", "slateblue"),("slategray", "slategray"),("slategrey", "slategrey"),("snow", "snow"),("springgreen", "springgreen"),("steelblue", "steelblue"),("tan", "tan"),("teal", "teal"),("thistle", "thistle"),("tomato", "tomato"),("turquoise", "turquoise"),("violet", "violet"),("wheat", "wheat"),("white", "white"),("whitesmoke", "whitesmoke"),("yellow", "yellow"),("yellowgreen", "yellowgreen")
            ])),
    },
    Rule {
            matcher: "Bdbc",
            name: "Border bottom color",
            param_tovalue: true,
            styles: Style::mapped([("border-bottom-color", "${0}")]),
            arguments: Some(HashMap::from([
                ("t", "transparent"),("cc", "currentColor"),("n", "none"),("aliceblue", "aliceblue"),("antiquewhite", "antiquewhite"),("aqua", "aqua"),("aquamarine", "aquamarine"),("azure", "azure"),("beige", "beige"),("bisque", "bisque"),("black", "black"),("blanchedalmond", "blanchedalmond"),("blue", "blue"),("blueviolet", "blueviolet"),("brown", "brown"),("burlywood", "burlywood"),("cadetblue", "cadetblue"),("chartreuse", "chartreuse"),("chocolate", "chocolate"),("coral", "coral"),("cornflowerblue", "cornflowerblue"),("cornsilk", "cornsilk"),("crimson", "crimson"),("cyan", "cyan"),("darkblue", "darkblue"),("darkcyan", "darkcyan"),("darkgoldenrod", "darkgoldenrod"),("darkgray", "darkgray"),("darkgreen", "darkgreen"),("darkgrey", "darkgrey"),("darkkhaki", "darkkhaki"),("darkmagenta", "darkmagenta"),("darkolivegreen", "darkolivegreen"),("darkorange", "darkorange"),("darkorchid", "darkorchid"),("darkred", "darkred"),("darksalmon", "darksalmon"),("darkseagreen", "darkseagreen"),("darkslateblue", "darkslateblue"),("darkslategray", "darkslategray"),("darkslategrey", "darkslategrey"),("darkturquoise", "darkturquoise"),("darkviolet", "darkviolet"),("deeppink", "deeppink"),("deepskyblue", "deepskyblue"),("dimgray", "dimgray"),("dimgrey", "dimgrey"),("dodgerblue", "dodgerblue"),("firebrick", "firebrick"),("floralwhite", "floralwhite"),("forestgreen", "forestgreen"),("fuchsia", "fuchsia"),("gainsboro", "gainsboro"),("ghostwhite", "ghostwhite"),("gold", "gold"),("goldenrod", "goldenrod"),("gray", "gray"),("green", "green"),("greenyellow", "greenyellow"),("grey", "grey"),("honeydew", "honeydew"),("hotpink", "hotpink"),("indianred", "indianred"),("indigo", "indigo"),("ivory", "ivory"),("khaki", "khaki"),("lavender", "lavender"),("lavenderblush", "lavenderblush"),("lawngreen", "lawngreen"),("lemonchiffon", "lemonchiffon"),("lightblue", "lightblue"),("lightcoral", "lightcoral"),("lightcyan", "lightcyan"),("lightgoldenrodyellow", "lightgoldenrodyellow"),("lightgray", "lightgray"),("lightgreen", "lightgreen"),("lightgrey", "lightgrey"),("lightpink", "lightpink"),("lightsalmon", "lightsalmon"),("lightseagreen", "lightseagreen"),("lightskyblue", "lightskyblue"),("lightslategray", "lightslategray"),("lightslategrey", "lightslategrey"),("lightsteelblue", "lightsteelblue"),("lightyellow", "lightyellow"),("lime", "lime"),("limegreen", "limegreen"),("linen", "linen"),("magenta", "magenta"),("maroon", "maroon"),("mediumaquamarine", "mediumaquamarine"),("mediumblue", "mediumblue"),("mediumorchid", "mediumorchid"),("mediumpurple", "mediumpurple"),("mediumseagreen", "mediumseagreen"),("mediumslateblue", "mediumslateblue"),("mediumspringgreen", "mediumspringgreen"),("mediumturquoise", "mediumturquoise"),("mediumvioletred", "mediumvioletred"),("midnightblue", "midnightblue"),("mintcream", "mintcream"),("mistyrose", "mistyrose"),("moccasin", "moccasin"),("navajowhite", "navajowhite"),("navy", "navy"),("oldlace", "oldlace"),("olive", "olive"),("olivedrab", "olivedrab"),("orange", "orange"),("orangered", "orangered"),("orchid", "orchid"),("palegoldenrod", "palegoldenrod"),("palegreen", "palegreen"),("paleturquoise", "paleturquoise"),("palevioletred", "palevioletred"),("papayawhip", "papayawhip"),("peachpuff", "peachpuff"),("peru", "peru"),("pink", "pink"),("plum", "plum"),("powderblue", "powderblue"),("purple", "purple"),("red", "red"),("rosybrown", "rosybrown"),("royalblue", "royalblue"),("saddlebrown", "saddlebrown"),("salmon", "salmon"),("sandybrown", "sandybrown"),("seagreen", "seagreen"),("seashell", "seashell"),("sienna", "sienna"),("silver", "silver"),("skyblue", "skyblue"),("slateblue", "slateblue"),("slategray", "slategray"),("slategrey", "slategrey"),("snow", "snow"),("springgreen", "springgreen"),("steelblue", "steelblue"),("tan", "tan"),("teal", "teal"),("thistle", "thistle"),("tomato", "tomato"),("turquoise", "turquoise"),("violet", "violet"),("wheat", "wheat"),("white", "white"),("whitesmoke", "whitesmoke"),("yellow", "yellow"),("yellowgreen", "yellowgreen")
            ])),
    },
    Rule {
            matcher: "Bdstartc",
            name: "Border start color",
            param_tovalue: true,
            styles: Style::mapped([("border-left-color", "${0}")]),
            arguments: Some(HashMap::from([
                ("t", "transparent"),("cc", "currentColor"),("n", "none"),("aliceblue", "aliceblue"),("antiquewhite", "antiquewhite"),("aqua", "aqua"),("aquamarine", "aquamarine"),("azure", "azure"),("beige", "beige"),("bisque", "bisque"),("black", "black"),("blanchedalmond", "blanchedalmond"),("blue", "blue"),("blueviolet", "blueviolet"),("brown", "brown"),("burlywood", "burlywood"),("cadetblue", "cadetblue"),("chartreuse", "chartreuse"),("chocolate", "chocolate"),("coral", "coral"),("cornflowerblue", "cornflowerblue"),("cornsilk", "cornsilk"),("crimson", "crimson"),("cyan", "cyan"),("darkblue", "darkblue"),("darkcyan", "darkcyan"),("darkgoldenrod", "darkgoldenrod"),("darkgray", "darkgray"),("darkgreen", "darkgreen"),("darkgrey", "darkgrey"),("darkkhaki", "darkkhaki"),("darkmagenta", "darkmagenta"),("darkolivegreen", "darkolivegreen"),("darkorange", "darkorange"),("darkorchid", "darkorchid"),("darkred", "darkred"),("darksalmon", "darksalmon"),("darkseagreen", "darkseagreen"),("darkslateblue", "darkslateblue"),("darkslategray", "darkslategray"),("darkslategrey", "darkslategrey"),("darkturquoise", "darkturquoise"),("darkviolet", "darkviolet"),("deeppink", "deeppink"),("deepskyblue", "deepskyblue"),("dimgray", "dimgray"),("dimgrey", "dimgrey"),("dodgerblue", "dodgerblue"),("firebrick", "firebrick"),("floralwhite", "floralwhite"),("forestgreen", "forestgreen"),("fuchsia", "fuchsia"),("gainsboro", "gainsboro"),("ghostwhite", "ghostwhite"),("gold", "gold"),("goldenrod", "goldenrod"),("gray", "gray"),("green", "green"),("greenyellow", "greenyellow"),("grey", "grey"),("honeydew", "honeydew"),("hotpink", "hotpink"),("indianred", "indianred"),("indigo", "indigo"),("ivory", "ivory"),("khaki", "khaki"),("lavender", "lavender"),("lavenderblush", "lavenderblush"),("lawngreen", "lawngreen"),("lemonchiffon", "lemonchiffon"),("lightblue", "lightblue"),("lightcoral", "lightcoral"),("lightcyan", "lightcyan"),("lightgoldenrodyellow", "lightgoldenrodyellow"),("lightgray", "lightgray"),("lightgreen", "lightgreen"),("lightgrey", "lightgrey"),("lightpink", "lightpink"),("lightsalmon", "lightsalmon"),("lightseagreen", "lightseagreen"),("lightskyblue", "lightskyblue"),("lightslategray", "lightslategray"),("lightslategrey", "lightslategrey"),("lightsteelblue", "lightsteelblue"),("lightyellow", "lightyellow"),("lime", "lime"),("limegreen", "limegreen"),("linen", "linen"),("magenta", "magenta"),("maroon", "maroon"),("mediumaquamarine", "mediumaquamarine"),("mediumblue", "mediumblue"),("mediumorchid", "mediumorchid"),("mediumpurple", "mediumpurple"),("mediumseagreen", "mediumseagreen"),("mediumslateblue", "mediumslateblue"),("mediumspringgreen", "mediumspringgreen"),("mediumturquoise", "mediumturquoise"),("mediumvioletred", "mediumvioletred"),("midnightblue", "midnightblue"),("mintcream", "mintcream"),("mistyrose", "mistyrose"),("moccasin", "moccasin"),("navajowhite", "navajowhite"),("navy", "navy"),("oldlace", "oldlace"),("olive", "olive"),("olivedrab", "olivedrab"),("orange", "orange"),("orangered", "orangered"),("orchid", "orchid"),("palegoldenrod", "palegoldenrod"),("palegreen", "palegreen"),("paleturquoise", "paleturquoise"),("palevioletred", "palevioletred"),("papayawhip", "papayawhip"),("peachpuff", "peachpuff"),("peru", "peru"),("pink", "pink"),("plum", "plum"),("powderblue", "powderblue"),("purple", "purple"),("red", "red"),("rosybrown", "rosybrown"),("royalblue", "royalblue"),("saddlebrown", "saddlebrown"),("salmon", "salmon"),("sandybrown", "sandybrown"),("seagreen", "seagreen"),("seashell", "seashell"),("sienna", "sienna"),("silver", "silver"),("skyblue", "skyblue"),("slateblue", "slateblue"),("slategray", "slategray"),("slategrey", "slategrey"),("snow", "snow"),("springgreen", "springgreen"),("steelblue", "steelblue"),("tan", "tan"),("teal", "teal"),("thistle", "thistle"),("tomato", "tomato"),("turquoise", "turquoise"),("violet", "violet"),("wheat", "wheat"),("white", "white"),("whitesmoke", "whitesmoke"),("yellow", "yellow"),("yellowgreen", "yellowgreen")
            ])),
    },
    Rule {
            matcher: "Bdsp",
            name: "Border spacing",
            param_tovalue: true,
            styles: Style::mapped([("border-spacing", "${0} ${1}")]),
            arguments: Some(HashMap::from([
                ("i", "inherit")
            ])),
    },
    Rule {
            matcher: "Bds",
            name: "Border style",
            param_tovalue: false,
            styles: Style::mapped([("border-style", "${0}")]),
            arguments: Some(HashMap::from([
                ("d", "dotted"),("da", "dashed"),("do", "double"),("g", "groove"),("h", "hidden"),("i", "inset"),("n", "none"),("o", "outset"),("r", "ridge"),("s", "solid")
            ])),
    },
    Rule {
            matcher: "Bdts",
            name: "Border top style",
            param_tovalue: false,
            styles: Style::mapped([("border-top-style", "${0}")]),
            arguments: Some(HashMap::from([
                ("d", "dotted"),("da", "dashed"),("do", "double"),("g", "groove"),("h", "hidden"),("i", "inset"),("n", "none"),("o", "outset"),("r", "ridge"),("s", "solid")
            ])),
    },
    Rule {
            matcher: "Bdends",
            name: "Border end style",
            param_tovalue: false,
            styles: Style::mapped([("border-right-style", "${0}")]),
            arguments: Some(HashMap::from([
                ("d", "dotted"),("da", "dashed"),("do", "double"),("g", "groove"),("h", "hidden"),("i", "inset"),("n", "none"),("o", "outset"),("r", "ridge"),("s", "solid")
            ])),
    },
    Rule {
            matcher: "Bdbs",
            name: "Border bottom style",
            param_tovalue: false,
            styles: Style::mapped([("border-bottom-style", "${0}")]),
            arguments: Some(HashMap::from([
                ("d", "dotted"),("da", "dashed"),("do", "double"),("g", "groove"),("h", "hidden"),("i", "inset"),("n", "none"),("o", "outset"),("r", "ridge"),("s", "solid")
            ])),
    },
    Rule {
            matcher: "Bdstarts",
            name: "Border start style",
            param_tovalue: false,
            styles: Style::mapped([("border-left-style", "${0}")]),
            arguments: Some(HashMap::from([
                ("d", "dotted"),("da", "dashed"),("do", "double"),("g", "groove"),("h", "hidden"),("i", "inset"),("n", "none"),("o", "outset"),("r", "ridge"),("s", "solid")
            ])),
    },
    Rule {
            matcher: "Bdw",
            name: "Border width",
            param_tovalue: true,
            styles: Style::mapped([("border-width", "${0}")]),
            arguments: Some(HashMap::from([
                ("m", "medium"),("t", "thin"),("th", "thick")
            ])),
    },
    Rule {
            matcher: "Bdtw",
            name: "Border top width",
            param_tovalue: true,
            styles: Style::mapped([("border-top-width", "${0}")]),
            arguments: Some(HashMap::from([
                ("m", "medium"),("t", "thin"),("th", "thick")
            ])),
    },
    Rule {
            matcher: "Bdendw",
            name: "Border end width",
            param_tovalue: true,
            styles: Style::mapped([("border-right-width", "${0}")]),
            arguments: Some(HashMap::from([
                ("m", "medium"),("t", "thin"),("th", "thick")
            ])),
    },
    Rule {
            matcher: "Bdbw",
            name: "Border bottom width",
            param_tovalue: true,
            styles: Style::mapped([("border-bottom-width", "${0}")]),
            arguments: Some(HashMap::from([
                ("m", "medium"),("t", "thin"),("th", "thick")
            ])),
    },
    Rule {
            matcher: "Bdstartw",
            name: "Border start width",
            param_tovalue: true,
            styles: Style::mapped([("border-left-width", "${0}")]),
            arguments: Some(HashMap::from([
                ("m", "medium"),("t", "thin"),("th", "thick")
            ])),
    },
    Rule {
            matcher: "Bdrs",
            name: "Border radius",
            param_tovalue: true,
            styles: Style::mapped([("border-radius", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bdrstend",
            name: "Border radius top right",
            param_tovalue: true,
            styles: Style::mapped([("border-top-right-radius", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bdrsbend",
            name: "Border radius bottom right",
            param_tovalue: true,
            styles: Style::mapped([("border-bottom-right-radius", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bdrsbstart",
            name: "Border radius bottom left",
            param_tovalue: true,
            styles: Style::mapped([("border-bottom-left-radius", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bdrststart",
            name: "Border radius top left",
            param_tovalue: true,
            styles: Style::mapped([("border-top-left-radius", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Bg",
            name: "Background",
            param_tovalue: false,
            styles: Style::mapped([("background", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none"),("t", "transparent")
            ])),
    },
    Rule {
            matcher: "Bgbm",
            name: "Background blend mode",
            param_tovalue: false,
            styles: Style::mapped([("background-blend-mode", "${0}")]),
            arguments: Some(HashMap::from([
                ("c", "color"),("cb", "color-burn"),("cd", "color-dodge"),("d", "darken"),("di", "difference"),("e", "exclusion"),("h", "hue"),("hl", "hard-light"),("l", "lighten"),("lu", "luminosity"),("m", "multiply"),("n", "normal"),("o", "overlay"),("s", "saturation"),("sc", "screen"),("sl", "soft-light"),("pd", "plus-darker"),("pl", "plus-lighter")
            ])),
    },
    Rule {
            matcher: "Bgi",
            name: "Background image",
            param_tovalue: false,
            styles: Style::mapped([("background-image", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none")
            ])),
    },
    Rule {
            matcher: "Bgc",
            name: "Background color",
            param_tovalue: true,
            styles: Style::mapped([("background-color", "${0}")]),
            arguments: Some(HashMap::from([
                ("t", "transparent"),("cc", "currentColor"),("n", "none"),("aliceblue", "aliceblue"),("antiquewhite", "antiquewhite"),("aqua", "aqua"),("aquamarine", "aquamarine"),("azure", "azure"),("beige", "beige"),("bisque", "bisque"),("black", "black"),("blanchedalmond", "blanchedalmond"),("blue", "blue"),("blueviolet", "blueviolet"),("brown", "brown"),("burlywood", "burlywood"),("cadetblue", "cadetblue"),("chartreuse", "chartreuse"),("chocolate", "chocolate"),("coral", "coral"),("cornflowerblue", "cornflowerblue"),("cornsilk", "cornsilk"),("crimson", "crimson"),("cyan", "cyan"),("darkblue", "darkblue"),("darkcyan", "darkcyan"),("darkgoldenrod", "darkgoldenrod"),("darkgray", "darkgray"),("darkgreen", "darkgreen"),("darkgrey", "darkgrey"),("darkkhaki", "darkkhaki"),("darkmagenta", "darkmagenta"),("darkolivegreen", "darkolivegreen"),("darkorange", "darkorange"),("darkorchid", "darkorchid"),("darkred", "darkred"),("darksalmon", "darksalmon"),("darkseagreen", "darkseagreen"),("darkslateblue", "darkslateblue"),("darkslategray", "darkslategray"),("darkslategrey", "darkslategrey"),("darkturquoise", "darkturquoise"),("darkviolet", "darkviolet"),("deeppink", "deeppink"),("deepskyblue", "deepskyblue"),("dimgray", "dimgray"),("dimgrey", "dimgrey"),("dodgerblue", "dodgerblue"),("firebrick", "firebrick"),("floralwhite", "floralwhite"),("forestgreen", "forestgreen"),("fuchsia", "fuchsia"),("gainsboro", "gainsboro"),("ghostwhite", "ghostwhite"),("gold", "gold"),("goldenrod", "goldenrod"),("gray", "gray"),("green", "green"),("greenyellow", "greenyellow"),("grey", "grey"),("honeydew", "honeydew"),("hotpink", "hotpink"),("indianred", "indianred"),("indigo", "indigo"),("ivory", "ivory"),("khaki", "khaki"),("lavender", "lavender"),("lavenderblush", "lavenderblush"),("lawngreen", "lawngreen"),("lemonchiffon", "lemonchiffon"),("lightblue", "lightblue"),("lightcoral", "lightcoral"),("lightcyan", "lightcyan"),("lightgoldenrodyellow", "lightgoldenrodyellow"),("lightgray", "lightgray"),("lightgreen", "lightgreen"),("lightgrey", "lightgrey"),("lightpink", "lightpink"),("lightsalmon", "lightsalmon"),("lightseagreen", "lightseagreen"),("lightskyblue", "lightskyblue"),("lightslategray", "lightslategray"),("lightslategrey", "lightslategrey"),("lightsteelblue", "lightsteelblue"),("lightyellow", "lightyellow"),("lime", "lime"),("limegreen", "limegreen"),("linen", "linen"),("magenta", "magenta"),("maroon", "maroon"),("mediumaquamarine", "mediumaquamarine"),("mediumblue", "mediumblue"),("mediumorchid", "mediumorchid"),("mediumpurple", "mediumpurple"),("mediumseagreen", "mediumseagreen"),("mediumslateblue", "mediumslateblue"),("mediumspringgreen", "mediumspringgreen"),("mediumturquoise", "mediumturquoise"),("mediumvioletred", "mediumvioletred"),("midnightblue", "midnightblue"),("mintcream", "mintcream"),("mistyrose", "mistyrose"),("moccasin", "moccasin"),("navajowhite", "navajowhite"),("navy", "navy"),("oldlace", "oldlace"),("olive", "olive"),("olivedrab", "olivedrab"),("orange", "orange"),("orangered", "orangered"),("orchid", "orchid"),("palegoldenrod", "palegoldenrod"),("palegreen", "palegreen"),("paleturquoise", "paleturquoise"),("palevioletred", "palevioletred"),("papayawhip", "papayawhip"),("peachpuff", "peachpuff"),("peru", "peru"),("pink", "pink"),("plum", "plum"),("powderblue", "powderblue"),("purple", "purple"),("red", "red"),("rosybrown", "rosybrown"),("royalblue", "royalblue"),("saddlebrown", "saddlebrown"),("salmon", "salmon"),("sandybrown", "sandybrown"),("seagreen", "seagreen"),("seashell", "seashell"),("sienna", "sienna"),("silver", "silver"),("skyblue", "skyblue"),("slateblue", "slateblue"),("slategray", "slategray"),("slategrey", "slategrey"),("snow", "snow"),("springgreen", "springgreen"),("steelblue", "steelblue"),("tan", "tan"),("teal", "teal"),("thistle", "thistle"),("tomato", "tomato"),("turquoise", "turquoise"),("violet", "violet"),("wheat", "wheat"),("white", "white"),("whitesmoke", "whitesmoke"),("yellow", "yellow"),("yellowgreen", "yellowgreen")
            ])),
    },
    Rule {
            matcher: "Bgcp",
            name: "Background clip",
            param_tovalue: false,
            styles: Style::mapped([("background-clip", "${0}")]),
            arguments: Some(HashMap::from([
                ("bb", "border-box"),("cb", "content-box"),("pb", "padding-box")
            ])),
    },
    Rule {
            matcher: "Bgo",
            name: "Background origin",
            param_tovalue: false,
            styles: Style::mapped([("background-origin", "${0}")]),
            arguments: Some(HashMap::from([
                ("bb", "border-box"),("cb", "content-box"),("pb", "padding-box")
            ])),
    },
    Rule {
            matcher: "Bgz",
            name: "Background size",
            param_tovalue: true,
            styles: Style::mapped([("background-size", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("ct", "contain"),("cv", "cover")
            ])),
    },
    Rule {
            matcher: "Bga",
            name: "Background attachment",
            param_tovalue: false,
            styles: Style::mapped([("background-attachment", "${0}")]),
            arguments: Some(HashMap::from([
                ("f", "fixed"),("l", "local"),("s", "scroll")
            ])),
    },
    Rule {
            matcher: "Bgp",
            name: "Background position",
            param_tovalue: true,
            styles: Style::mapped([("background-position", "${0} ${1}")]),
            arguments: Some(HashMap::from([
                ("start_t", "left 0"),("end_t", "right 0"),("start_b", "left 100%"),("end_b", "right 100%"),("start_c", "left center"),("end_c", "right center"),("c_b", "center 100%"),("c_t", "center 0"),("c", "center")
            ])),
    },
    Rule {
            matcher: "Bgpx",
            name: "Background position (X axis)",
            param_tovalue: true,
            styles: Style::mapped([("background-position-x", "${0}")]),
            arguments: Some(HashMap::from([
                ("start", "left"),("end", "right"),("c", "50%")
            ])),
    },
    Rule {
            matcher: "Bgpy",
            name: "Background position (Y axis)",
            param_tovalue: true,
            styles: Style::mapped([("background-position-y", "${0}")]),
            arguments: Some(HashMap::from([
                ("t", "0"),("b", "100%"),("c", "50%")
            ])),
    },
    Rule {
            matcher: "Bgr",
            name: "Background repeat",
            param_tovalue: false,
            styles: Style::mapped([("background-repeat", "${0}")]),
            arguments: Some(HashMap::from([
                ("nr", "no-repeat"),("rx", "repeat-x"),("ry", "repeat-y"),("r", "repeat"),("s", "space"),("ro", "round")
            ])),
    },
    Rule {
            matcher: "Bdcl",
            name: "Border collapse",
            param_tovalue: false,
            styles: Style::mapped([("border-collapse", "${0}")]),
            arguments: Some(HashMap::from([
                ("c", "collapse"),("s", "separate")
            ])),
    },
    Rule {
            matcher: "Bxz",
            name: "Box sizing",
            param_tovalue: false,
            styles: Style::mapped([("box-sizing", "${0}")]),
            arguments: Some(HashMap::from([
                ("cb", "content-box"),("pb", "padding-box"),("bb", "border-box")
            ])),
    },
    Rule {
            matcher: "Bxsh",
            name: "Box shadow",
            param_tovalue: false,
            styles: Style::mapped([("box-shadow", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none")
            ])),
    },
    Rule {
            matcher: "Cl",
            name: "Clear",
            param_tovalue: false,
            styles: Style::mapped([("clear", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none"),("b", "both"),("start", "left"),("end", "right")
            ])),
    },
    Rule {
            matcher: "Cp",
            name: "Clip path",
            param_tovalue: false,
            styles: Style::mapped([("clip-path", "${0}")]),
            arguments: Some(HashMap::from([
                ("bb", "border-box"),("cb", "content-box"),("fb", "fill-box"),("mb", "margin-box"),("n", "none"),("pb", "padding-box"),("sb", "stroke-box"),("vb", "view-box")
            ])),
    },
    Rule {
            matcher: "C",
            name: "Color",
            param_tovalue: true,
            styles: Style::mapped([("color", "${0}")]),
            arguments: Some(HashMap::from([
                ("t", "transparent"),("cc", "currentColor"),("n", "none"),("aliceblue", "aliceblue"),("antiquewhite", "antiquewhite"),("aqua", "aqua"),("aquamarine", "aquamarine"),("azure", "azure"),("beige", "beige"),("bisque", "bisque"),("black", "black"),("blanchedalmond", "blanchedalmond"),("blue", "blue"),("blueviolet", "blueviolet"),("brown", "brown"),("burlywood", "burlywood"),("cadetblue", "cadetblue"),("chartreuse", "chartreuse"),("chocolate", "chocolate"),("coral", "coral"),("cornflowerblue", "cornflowerblue"),("cornsilk", "cornsilk"),("crimson", "crimson"),("cyan", "cyan"),("darkblue", "darkblue"),("darkcyan", "darkcyan"),("darkgoldenrod", "darkgoldenrod"),("darkgray", "darkgray"),("darkgreen", "darkgreen"),("darkgrey", "darkgrey"),("darkkhaki", "darkkhaki"),("darkmagenta", "darkmagenta"),("darkolivegreen", "darkolivegreen"),("darkorange", "darkorange"),("darkorchid", "darkorchid"),("darkred", "darkred"),("darksalmon", "darksalmon"),("darkseagreen", "darkseagreen"),("darkslateblue", "darkslateblue"),("darkslategray", "darkslategray"),("darkslategrey", "darkslategrey"),("darkturquoise", "darkturquoise"),("darkviolet", "darkviolet"),("deeppink", "deeppink"),("deepskyblue", "deepskyblue"),("dimgray", "dimgray"),("dimgrey", "dimgrey"),("dodgerblue", "dodgerblue"),("firebrick", "firebrick"),("floralwhite", "floralwhite"),("forestgreen", "forestgreen"),("fuchsia", "fuchsia"),("gainsboro", "gainsboro"),("ghostwhite", "ghostwhite"),("gold", "gold"),("goldenrod", "goldenrod"),("gray", "gray"),("green", "green"),("greenyellow", "greenyellow"),("grey", "grey"),("honeydew", "honeydew"),("hotpink", "hotpink"),("indianred", "indianred"),("indigo", "indigo"),("ivory", "ivory"),("khaki", "khaki"),("lavender", "lavender"),("lavenderblush", "lavenderblush"),("lawngreen", "lawngreen"),("lemonchiffon", "lemonchiffon"),("lightblue", "lightblue"),("lightcoral", "lightcoral"),("lightcyan", "lightcyan"),("lightgoldenrodyellow", "lightgoldenrodyellow"),("lightgray", "lightgray"),("lightgreen", "lightgreen"),("lightgrey", "lightgrey"),("lightpink", "lightpink"),("lightsalmon", "lightsalmon"),("lightseagreen", "lightseagreen"),("lightskyblue", "lightskyblue"),("lightslategray", "lightslategray"),("lightslategrey", "lightslategrey"),("lightsteelblue", "lightsteelblue"),("lightyellow", "lightyellow"),("lime", "lime"),("limegreen", "limegreen"),("linen", "linen"),("magenta", "magenta"),("maroon", "maroon"),("mediumaquamarine", "mediumaquamarine"),("mediumblue", "mediumblue"),("mediumorchid", "mediumorchid"),("mediumpurple", "mediumpurple"),("mediumseagreen", "mediumseagreen"),("mediumslateblue", "mediumslateblue"),("mediumspringgreen", "mediumspringgreen"),("mediumturquoise", "mediumturquoise"),("mediumvioletred", "mediumvioletred"),("midnightblue", "midnightblue"),("mintcream", "mintcream"),("mistyrose", "mistyrose"),("moccasin", "moccasin"),("navajowhite", "navajowhite"),("navy", "navy"),("oldlace", "oldlace"),("olive", "olive"),("olivedrab", "olivedrab"),("orange", "orange"),("orangered", "orangered"),("orchid", "orchid"),("palegoldenrod", "palegoldenrod"),("palegreen", "palegreen"),("paleturquoise", "paleturquoise"),("palevioletred", "palevioletred"),("papayawhip", "papayawhip"),("peachpuff", "peachpuff"),("peru", "peru"),("pink", "pink"),("plum", "plum"),("powderblue", "powderblue"),("purple", "purple"),("red", "red"),("rosybrown", "rosybrown"),("royalblue", "royalblue"),("saddlebrown", "saddlebrown"),("salmon", "salmon"),("sandybrown", "sandybrown"),("seagreen", "seagreen"),("seashell", "seashell"),("sienna", "sienna"),("silver", "silver"),("skyblue", "skyblue"),("slateblue", "slateblue"),("slategray", "slategray"),("slategrey", "slategrey"),("snow", "snow"),("springgreen", "springgreen"),("steelblue", "steelblue"),("tan", "tan"),("teal", "teal"),("thistle", "thistle"),("tomato", "tomato"),("turquoise", "turquoise"),("violet", "violet"),("wheat", "wheat"),("white", "white"),("whitesmoke", "whitesmoke"),("yellow", "yellow"),("yellowgreen", "yellowgreen")
            ])),
    },
    Rule {
            matcher: "Colm",
            name: "Columns",
            param_tovalue: true,
            styles: Style::mapped([("columns", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Colmc",
            name: "Column count",
            param_tovalue: false,
            styles: Style::mapped([("column-count", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Colmf",
            name: "Column fill",
            param_tovalue: false,
            styles: Style::mapped([("column-fill", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("b", "balance")
            ])),
    },
    Rule {
            matcher: "Colmg",
            name: "Column gap",
            param_tovalue: true,
            styles: Style::mapped([("column-gap", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "normal")
            ])),
    },
    Rule {
            matcher: "Colmr",
            name: "Column rule",
            param_tovalue: true,
            styles: Style::mapped([("column-rule", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Colmrc",
            name: "Column rule color",
            param_tovalue: false,
            styles: Style::mapped([("column-rule-color", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Colmrs",
            name: "Column rule style",
            param_tovalue: false,
            styles: Style::mapped([("column-rule-style", "${0}")]),
            arguments: Some(HashMap::from([
                ("d", "dotted"),("da", "dashed"),("do", "double"),("g", "groove"),("h", "hidden"),("i", "inset"),("n", "none"),("o", "outset"),("r", "ridge"),("s", "solid")
            ])),
    },
    Rule {
            matcher: "Colmrw",
            name: "Column rule width",
            param_tovalue: false,
            styles: Style::mapped([("column-rule-width", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Colms",
            name: "Column span",
            param_tovalue: false,
            styles: Style::mapped([("column-span", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "all"),("n", "none")
            ])),
    },
    Rule {
            matcher: "Colmw",
            name: "Column width",
            param_tovalue: true,
            styles: Style::mapped([("column-width", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "Ctn",
            name: "Contain",
            param_tovalue: false,
            styles: Style::mapped([("contain", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none"),("st", "strict"),("c", "content"),("z", "size"),("l", "layout"),("s", "style"),("p", "paint")
            ])),
    },
    Rule {
            matcher: "Cnt",
            name: "Content",
            param_tovalue: true,
            styles: Style::mapped([("content", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none"),("nor", "normal"),("oq", "open-quote"),("cq", "close-quote"),("noq", "no-open-quote"),("ncq", "no-close-quote")
            ])),
    },
    Rule {
            matcher: "Cur",
            name: "Cursor",
            param_tovalue: false,
            styles: Style::mapped([("cursor", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("as", "all-scroll"),("c", "cell"),("cr", "col-resize"),("co", "copy"),("cro", "crosshair"),("d", "default"),("er", "e-resize"),("ewr", "ew-resize"),("g", "grab"),("gr", "grabbing"),("h", "help"),("m", "move"),("n", "none"),("nd", "no-drop"),("na", "not-allowed"),("nr", "n-resize"),("ner", "ne-resize"),("neswr", "nesw-resize"),("nwser", "nwse-resize"),("nsr", "ns-resize"),("nwr", "nw-resize"),("p", "pointer"),("pr", "progress"),("rr", "row-resize"),("sr", "s-resize"),("ser", "se-resize"),("swr", "sw-resize"),("t", "text"),("vt", "vertical-text"),("w", "wait"),("wr", "w-resize"),("zi", "zoom-in"),("zo", "zoom-out")
            ])),
    },
    Rule {
            matcher: "D",
            name: "Display",
            param_tovalue: false,
            styles: Style::mapped([("display", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none"),("b", "block"),("f", "flex"),("g", "grid"),("i", "inline"),("ib", "inline-block"),("if", "inline-flex"),("ig", "inline-grid"),("tb", "table"),("tbr", "table-row"),("tbc", "table-cell"),("li", "list-item"),("ri", "run-in"),("cp", "compact"),("itb", "inline-table"),("tbcl", "table-column"),("tbclg", "table-column-group"),("tbhg", "table-header-group"),("tbfg", "table-footer-group"),("tbrg", "table-row-group")
            ])),
    },
    Rule {
            matcher: "Fil",
            name: "Filter",
            param_tovalue: false,
            styles: Style::mapped([("filter", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none")
            ])),
    },
    Rule {
            matcher: "Blur",
            name: "Blur (filter)",
            param_tovalue: true,
            styles: Style::mapped([("filter", "blur(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Brightness",
            name: "Brightness (filter)",
            param_tovalue: true,
            styles: Style::mapped([("filter", "brightness(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Contrast",
            name: "Contrast (filter)",
            param_tovalue: true,
            styles: Style::mapped([("filter", "contrast(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Dropshadow",
            name: "Drop shadow (filter)",
            param_tovalue: false,
            styles: Style::mapped([("filter", "drop-shadow(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Grayscale",
            name: "Grayscale (filter)",
            param_tovalue: true,
            styles: Style::mapped([("filter", "grayscale(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "HueRotate",
            name: "Hue Rotate (filter)",
            param_tovalue: true,
            styles: Style::mapped([("filter", "hue-rotate(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Invert",
            name: "Invert (filter)",
            param_tovalue: true,
            styles: Style::mapped([("filter", "invert(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Opacity",
            name: "Opacity (filter)",
            param_tovalue: true,
            styles: Style::mapped([("filter", "opacity(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Saturate",
            name: "Saturate (filter)",
            param_tovalue: true,
            styles: Style::mapped([("filter", "saturate(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Sepia",
            name: "Sepia (filter)",
            param_tovalue: true,
            styles: Style::mapped([("filter", "sepia(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Flx",
            name: "Flex (deprecated)",
            param_tovalue: false,
            styles: Style::mapped([("flex", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("n", "none")
            ])),
    },
    Rule {
            matcher: "Fx",
            name: "Flex",
            param_tovalue: false,
            styles: Style::mapped([("flex", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("n", "none")
            ])),
    },
    Rule {
            matcher: "Flxg",
            name: "Flex grow (deprecated)",
            param_tovalue: true,
            styles: Style::mapped([("flex-grow", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Fxg",
            name: "Flex grow",
            param_tovalue: true,
            styles: Style::mapped([("flex-grow", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Flxs",
            name: "Flex shrink (deprecated)",
            param_tovalue: true,
            styles: Style::mapped([("flex-shrink", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Fxs",
            name: "Flex shrink",
            param_tovalue: true,
            styles: Style::mapped([("flex-shrink", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Flxb",
            name: "Flex basis (deprecated)",
            param_tovalue: true,
            styles: Style::mapped([("flex-basis", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("n", "none")
            ])),
    },
    Rule {
            matcher: "Fxb",
            name: "Flex basis",
            param_tovalue: true,
            styles: Style::mapped([("flex-basis", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("n", "none")
            ])),
    },
    Rule {
            matcher: "Fld",
            name: "Flex direction (deprecated)",
            param_tovalue: false,
            styles: Style::mapped([("flex-direction", "${0}")]),
            arguments: Some(HashMap::from([
                ("r", "row"),("rr", "row-reverse"),("c", "column"),("cr", "column-reverse")
            ])),
    },
    Rule {
            matcher: "Fxd",
            name: "Flex direction",
            param_tovalue: false,
            styles: Style::mapped([("flex-direction", "${0}")]),
            arguments: Some(HashMap::from([
                ("r", "row"),("rr", "row-reverse"),("c", "column"),("cr", "column-reverse")
            ])),
    },
    Rule {
            matcher: "Flf",
            name: "Flex flow (deprecated)",
            param_tovalue: false,
            styles: Style::mapped([("flex-flow", "${0}")]),
            arguments: Some(HashMap::from([
                ("r", "row"),("rr", "row-reverse"),("c", "column"),("cr", "column-reverse"),("nw", "nowrap"),("w", "wrap"),("wr", "wrap-reverse")
            ])),
    },
    Rule {
            matcher: "Fxf",
            name: "Flex flow",
            param_tovalue: false,
            styles: Style::mapped([("flex-flow", "${0}")]),
            arguments: Some(HashMap::from([
                ("r", "row"),("rr", "row-reverse"),("c", "column"),("cr", "column-reverse"),("nw", "nowrap"),("w", "wrap"),("wr", "wrap-reverse")
            ])),
    },
    Rule {
            matcher: "Ga",
            name: "Grid Area",
            param_tovalue: false,
            styles: Style::mapped([("grid-area", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Gac",
            name: "Grid Auto Columns",
            param_tovalue: true,
            styles: Style::mapped([("grid-auto-columns", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("mc", "min-content"),("ma", "max-content")
            ])),
    },
    Rule {
            matcher: "Gaf",
            name: "Grid Auto Flow",
            param_tovalue: false,
            styles: Style::mapped([("grid-auto-flow", "${0}")]),
            arguments: Some(HashMap::from([
                ("c", "column"),("d", "dense"),("cd", "column dense"),("r", "row"),("rd", "row dense")
            ])),
    },
    Rule {
            matcher: "Gar",
            name: "Grid Auto Rows",
            param_tovalue: true,
            styles: Style::mapped([("grid-auto-rows", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("mc", "min-content"),("ma", "max-content")
            ])),
    },
    Rule {
            matcher: "Gc",
            name: "Grid Column",
            param_tovalue: true,
            styles: Style::mapped([("grid-column", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Gce",
            name: "Grid Column End",
            param_tovalue: true,
            styles: Style::mapped([("grid-column-end", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Gcs",
            name: "Grid Column Start",
            param_tovalue: true,
            styles: Style::mapped([("grid-column-start", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Gr",
            name: "Grid Row",
            param_tovalue: true,
            styles: Style::mapped([("grid-row", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Gre",
            name: "Grid Row End",
            param_tovalue: true,
            styles: Style::mapped([("grid-row-end", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Grs",
            name: "Grid Row Start",
            param_tovalue: true,
            styles: Style::mapped([("grid-row-start", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Gt",
            name: "Grid Template",
            param_tovalue: false,
            styles: Style::mapped([("grid-template", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Gta",
            name: "Grid Template Areas",
            param_tovalue: false,
            styles: Style::mapped([("grid-template-areas", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Gtc",
            name: "Grid Template Columns",
            param_tovalue: false,
            styles: Style::mapped([("grid-template-columns", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Gtr",
            name: "Grid Template Rows",
            param_tovalue: false,
            styles: Style::mapped([("grid-template-rows", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Or",
            name: "Order",
            param_tovalue: true,
            styles: Style::mapped([("order", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Jc",
            name: "Justify content",
            param_tovalue: false,
            styles: Style::mapped([("justify-content", "${0}")]),
            arguments: Some(HashMap::from([
                ("c", "center"),("e", "end"),("fe", "flex-end"),("fs", "flex-start"),("l", "left"),("n", "normal"),("r", "right"),("s", "start"),("sa", "space-around"),("sb", "space-between"),("se", "space-evenly"),("st", "stretch")
            ])),
    },
    Rule {
            matcher: "Ji",
            name: "Justify items",
            param_tovalue: false,
            styles: Style::mapped([("justify-items", "${0}")]),
            arguments: Some(HashMap::from([
                ("b", "baseline"),("c", "center"),("e", "end"),("fe", "flex-end"),("fs", "flex-start"),("l", "left"),("n", "normal"),("r", "right"),("s", "start"),("se", "self-end"),("ss", "self-start")
            ])),
    },
    Rule {
            matcher: "Js",
            name: "Justify self",
            param_tovalue: false,
            styles: Style::mapped([("justify-self", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("b", "baseline"),("c", "center"),("e", "end"),("fe", "flex-end"),("fs", "flex-start"),("l", "left"),("n", "normal"),("r", "right"),("s", "start"),("se", "self-end"),("ss", "self-start")
            ])),
    },
    Rule {
            matcher: "Flw",
            name: "Flex-wrap (deprecated)",
            param_tovalue: false,
            styles: Style::mapped([("flex-wrap", "${0}")]),
            arguments: Some(HashMap::from([
                ("nw", "nowrap"),("w", "wrap"),("wr", "wrap-reverse")
            ])),
    },
    Rule {
            matcher: "Fxw",
            name: "Flex-wrap",
            param_tovalue: false,
            styles: Style::mapped([("flex-wrap", "${0}")]),
            arguments: Some(HashMap::from([
                ("nw", "nowrap"),("w", "wrap"),("wr", "wrap-reverse")
            ])),
    },
    Rule {
            matcher: "Fl",
            name: "Float",
            param_tovalue: false,
            styles: Style::mapped([("float", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none"),("start", "left"),("end", "right")
            ])),
    },
    Rule {
            matcher: "Ff",
            name: "Font family",
            param_tovalue: false,
            styles: Style::mapped([("font-family", "${0}")]),
            arguments: Some(HashMap::from([
                ("c", r#""Monotype Corsiva", "Comic Sans MS", cursive"#),("f", "Capitals, Impact, fantasy"),("m", r#"Monaco, "Courier New", monospace"#),("s", r#"Georgia, "Times New Roman", serif"#),("ss", "Helvetica, Arial, sans-serif")
            ])),
    },
    Rule {
            matcher: "Fw",
            name: "Font weight",
            param_tovalue: false,
            styles: Style::mapped([("font-weight", "${0}")]),
            arguments: Some(HashMap::from([
                ("100", "100"),("200", "200"),("300", "300"),("400", "400"),("500", "500"),("600", "600"),("700", "700"),("800", "800"),("900", "900"),("b", "bold"),("br", "bolder"),("lr", "lighter"),("n", "normal")
            ])),
    },
    Rule {
            matcher: "Fz",
            name: "Font size",
            param_tovalue: true,
            styles: Style::mapped([("font-size", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Fs",
            name: "Font style",
            param_tovalue: false,
            styles: Style::mapped([("font-style", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "normal"),("i", "italic"),("o", "oblique")
            ])),
    },
    Rule {
            matcher: "Fv",
            name: "Font variant",
            param_tovalue: false,
            styles: Style::mapped([("font-variant", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "normal"),("sc", "small-caps")
            ])),
    },
    Rule {
            matcher: "Gp",
            name: "Gap",
            param_tovalue: true,
            styles: Style::mapped([("gap", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Rowg",
            name: "Row Gap",
            param_tovalue: true,
            styles: Style::mapped([("row-gap", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "H",
            name: "Height",
            param_tovalue: true,
            styles: Style::mapped([("height", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("a", "auto"),("av", "available"),("bb", "border-box"),("cb", "content-box"),("fc", "fit-content"),("maxc", "max-content"),("minc", "min-content")
            ])),
    },
    Rule {
            matcher: "Hy",
            name: "Hyphens",
            param_tovalue: false,
            styles: Style::mapped([("hyphens", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("n", "normal"),("m", "manual")
            ])),
    },
    Rule {
            matcher: "Iso",
            name: "Isolation",
            param_tovalue: false,
            styles: Style::mapped([("isolation", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("i", "isolate")
            ])),
    },
    Rule {
            matcher: "Lts",
            name: "Letter spacing",
            param_tovalue: true,
            styles: Style::mapped([("letter-spacing", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "normal")
            ])),
    },
    Rule {
            matcher: "List",
            name: "List style type",
            param_tovalue: false,
            styles: Style::mapped([("list-style-type", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none"),("d", "disc"),("c", "circle"),("s", "square"),("dc", "decimal"),("dclz", "decimal-leading-zero"),("lr", "lower-roman"),("lg", "lower-greek"),("ll", "lower-latin"),("ur", "upper-roman"),("ul", "upper-latin"),("a", "armenian"),("g", "georgian"),("la", "lower-alpha"),("ua", "upper-alpha")
            ])),
    },
    Rule {
            matcher: "Lisp",
            name: "List style position",
            param_tovalue: false,
            styles: Style::mapped([("list-style-position", "${0}")]),
            arguments: Some(HashMap::from([
                ("i", "inside"),("o", "outside")
            ])),
    },
    Rule {
            matcher: "Lisi",
            name: "List style image",
            param_tovalue: false,
            styles: Style::mapped([("list-style-image", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none")
            ])),
    },
    Rule {
            matcher: "Lh",
            name: "Line height",
            param_tovalue: true,
            styles: Style::mapped([("line-height", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "normal")
            ])),
    },
    Rule {
            matcher: "M",
            name: "Margin (all edges)",
            param_tovalue: true,
            styles: Style::mapped([("margin", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("a", "auto")
            ])),
    },
    Rule {
            matcher: "Mx",
            name: "Margin (X axis)",
            param_tovalue: true,
            styles: Style::mapped([("margin-left", "${0}"),("margin-right", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("a", "auto")
            ])),
    },
    Rule {
            matcher: "My",
            name: "Margin (Y axis)",
            param_tovalue: true,
            styles: Style::mapped([("margin-top", "${0}"),("margin-bottom", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("a", "auto")
            ])),
    },
    Rule {
            matcher: "Mt",
            name: "Margin top",
            param_tovalue: true,
            styles: Style::mapped([("margin-top", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("a", "auto")
            ])),
    },
    Rule {
            matcher: "Mend",
            name: "Margin end",
            param_tovalue: true,
            styles: Style::mapped([("margin-right", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("a", "auto")
            ])),
    },
    Rule {
            matcher: "Mb",
            name: "Margin bottom",
            param_tovalue: true,
            styles: Style::mapped([("margin-bottom", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("a", "auto")
            ])),
    },
    Rule {
            matcher: "Mstart",
            name: "Margin start",
            param_tovalue: true,
            styles: Style::mapped([("margin-left", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("a", "auto")
            ])),
    },
    Rule {
            matcher: "Mah",
            name: "Max height",
            param_tovalue: true,
            styles: Style::mapped([("max-height", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("maxc", "max-content"),("minc", "min-content"),("fa", "fill-available"),("fc", "fit-content")
            ])),
    },
    Rule {
            matcher: "Maw",
            name: "Max width",
            param_tovalue: true,
            styles: Style::mapped([("max-width", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none"),("fa", "fill-available"),("fc", "fit-content"),("maxc", "max-content"),("minc", "min-content")
            ])),
    },
    Rule {
            matcher: "Mih",
            name: "Min height",
            param_tovalue: true,
            styles: Style::mapped([("min-height", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("fa", "fill-available"),("fc", "fit-content"),("maxc", "max-content"),("minc", "min-content")
            ])),
    },
    Rule {
            matcher: "Miw",
            name: "Min width",
            param_tovalue: true,
            styles: Style::mapped([("min-width", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("fa", "fill-available"),("fc", "fit-content"),("maxc", "max-content"),("minc", "min-content")
            ])),
    },
    Rule {
            matcher: "Mbm",
            name: "Mix blend mode",
            param_tovalue: false,
            styles: Style::mapped([("mix-blend-mode", "${0}")]),
            arguments: Some(HashMap::from([
                ("c", "color"),("cb", "color-burn"),("cd", "color-dodge"),("d", "darken"),("di", "difference"),("e", "exclusion"),("h", "hue"),("hl", "hard-light"),("l", "lighten"),("lu", "luminosity"),("m", "multiply"),("n", "normal"),("o", "overlay"),("s", "saturation"),("sc", "screen"),("sl", "soft-light"),("pd", "plus-darker"),("pl", "plus-lighter")
            ])),
    },
    Rule {
            matcher: "Objf",
            name: "Object fit",
            param_tovalue: false,
            styles: Style::mapped([("object-fit", "${0}")]),
            arguments: Some(HashMap::from([
                ("ct", "contain"),("cv", "cover"),("f", "fill"),("n", "none"),("sd", "scale-down")
            ])),
    },
    Rule {
            matcher: "O",
            name: "Outline",
            param_tovalue: false,
            styles: Style::mapped([("outline", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("n", "none")
            ])),
    },
    Rule {
            matcher: "Oo",
            name: "Outline-offset",
            param_tovalue: true,
            styles: Style::mapped([("outline-offset", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "T",
            name: "Top",
            param_tovalue: true,
            styles: Style::mapped([("top", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "End",
            name: "End",
            param_tovalue: true,
            styles: Style::mapped([("right", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "B",
            name: "Bottom",
            param_tovalue: true,
            styles: Style::mapped([("bottom", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "Start",
            name: "Start",
            param_tovalue: true,
            styles: Style::mapped([("left", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "Op",
            name: "Opacity",
            param_tovalue: true,
            styles: Style::mapped([("opacity", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("1", "1")
            ])),
    },
    Rule {
            matcher: "Ov",
            name: "Overflow",
            param_tovalue: false,
            styles: Style::mapped([("overflow", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("h", "hidden"),("s", "scroll"),("v", "visible")
            ])),
    },
    Rule {
            matcher: "Ovx",
            name: "Overflow (X axis)",
            param_tovalue: false,
            styles: Style::mapped([("overflow-x", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("h", "hidden"),("s", "scroll"),("v", "visible")
            ])),
    },
    Rule {
            matcher: "Ovy",
            name: "Overflow (Y axis)",
            param_tovalue: false,
            styles: Style::mapped([("overflow-y", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("h", "hidden"),("s", "scroll"),("v", "visible")
            ])),
    },
    Rule {
            matcher: "Ovs",
            name: "Overflow scrolling",
            param_tovalue: false,
            styles: Style::mapped([("-webkit-overflow-scrolling", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("touch", "touch")
            ])),
    },
    Rule {
            matcher: "P",
            name: "Padding (all edges)",
            param_tovalue: true,
            styles: Style::mapped([("padding", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Px",
            name: "Padding (X axis)",
            param_tovalue: true,
            styles: Style::mapped([("padding-left", "${0}"),("padding-right", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Py",
            name: "Padding (Y axis)",
            param_tovalue: true,
            styles: Style::mapped([("padding-top", "${0}"),("padding-bottom", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Pt",
            name: "Padding top",
            param_tovalue: true,
            styles: Style::mapped([("padding-top", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Pend",
            name: "Padding end",
            param_tovalue: true,
            styles: Style::mapped([("padding-right", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Pb",
            name: "Padding bottom",
            param_tovalue: true,
            styles: Style::mapped([("padding-bottom", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Pstart",
            name: "Padding start",
            param_tovalue: true,
            styles: Style::mapped([("padding-left", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Pe",
            name: "Pointer events",
            param_tovalue: false,
            styles: Style::mapped([("pointer-events", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("all", "all"),("f", "fill"),("n", "none"),("p", "painted"),("s", "stroke"),("v", "visible"),("vf", "visibleFill"),("vp", "visiblePainted"),("vs", "visibleStroke")
            ])),
    },
    Rule {
            matcher: "Pos",
            name: "Position",
            param_tovalue: false,
            styles: Style::mapped([("position", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "absolute"),("f", "fixed"),("r", "relative"),("s", "static"),("st", "sticky")
            ])),
    },
    Rule {
            matcher: "Rsz",
            name: "Resize",
            param_tovalue: false,
            styles: Style::mapped([("resize", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none"),("b", "both"),("h", "horizontal"),("v", "vertical")
            ])),
    },
    Rule {
            matcher: "Sb",
            name: "Scroll Behavior",
            param_tovalue: false,
            styles: Style::mapped([("scroll-behavior", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("s", "smooth")
            ])),
    },
    Rule {
            matcher: "Ssa",
            name: "Scroll Snap Align",
            param_tovalue: false,
            styles: Style::mapped([("scroll-snap-align", "${0}")]),
            arguments: Some(HashMap::from([
                ("c", "center"),("c_e", "center end"),("c_n", "center none"),("c_s", "center start"),("e", "end"),("e_c", "end center"),("e_n", "end none"),("e_s", "end start"),("n", "none"),("n_c", "none center"),("n_e", "none end"),("n_s", "none start"),("s", "start"),("s_c", "start center"),("s_n", "start none"),("s_e", "start end")
            ])),
    },
    Rule {
            matcher: "Sst",
            name: "Scroll Snap Type",
            param_tovalue: false,
            styles: Style::mapped([("scroll-snap-type", "${0}")]),
            arguments: Some(HashMap::from([
                ("b", "block"),("b_m", "block mandatory"),("b_p", "block proximity"),("bo", "both"),("bo_m", "both mandatory"),("bo_p", "both proximity"),("i", "inline"),("i_m", "inline mandatory"),("i_p", "inline proximity"),("n", "none"),("x", "x"),("x_m", "x mandatory"),("x_p", "x proximity"),("y", "y"),("y_m", "y mandatory"),("y_p", "y proximity")
            ])),
    },
    Rule {
            matcher: "Sss",
            name: "Scroll Snap Stop",
            param_tovalue: false,
            styles: Style::mapped([("scroll-snap-stop", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "always"),("n", "normal")
            ])),
    },
    Rule {
            matcher: "Sm",
            name: "Scroll margin (all edges)",
            param_tovalue: true,
            styles: Style::mapped([("scroll-margin", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Smx",
            name: "Scroll margin (X axis)",
            param_tovalue: true,
            styles: Style::mapped([("scroll-margin-left", "${0}"),("scroll-margin-right", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Smy",
            name: "Scroll margin (Y axis)",
            param_tovalue: true,
            styles: Style::mapped([("scroll-margin-top", "${0}"),("scroll-margin-bottom", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Smt",
            name: "Scroll margin top",
            param_tovalue: true,
            styles: Style::mapped([("scroll-margin-top", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Smend",
            name: "Scroll margin end",
            param_tovalue: true,
            styles: Style::mapped([("scroll-margin-right", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Smb",
            name: "Scroll margin bottom",
            param_tovalue: true,
            styles: Style::mapped([("scroll-margin-bottom", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Smstart",
            name: "Scroll margin start",
            param_tovalue: true,
            styles: Style::mapped([("scroll-margin-left", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Sp",
            name: "Scroll padding (all edges)",
            param_tovalue: true,
            styles: Style::mapped([("scroll-padding", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "Spx",
            name: "Scroll padding (X axis)",
            param_tovalue: true,
            styles: Style::mapped([("scroll-padding-left", "${0}"),("scroll-padding-right", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Spy",
            name: "Scroll padding (Y axis)",
            param_tovalue: true,
            styles: Style::mapped([("scroll-padding-top", "${0}"),("scroll-padding-bottom", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Spt",
            name: "Scroll padding top",
            param_tovalue: true,
            styles: Style::mapped([("scroll-padding-top", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "Spend",
            name: "Scroll padding end",
            param_tovalue: true,
            styles: Style::mapped([("scroll-padding-right", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "Spb",
            name: "Scroll padding bottom",
            param_tovalue: true,
            styles: Style::mapped([("scroll-padding-bottom", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "Spstart",
            name: "Scroll padding start",
            param_tovalue: true,
            styles: Style::mapped([("scroll-padding-left", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "Tbl",
            name: "Table layout",
            param_tovalue: false,
            styles: Style::mapped([("table-layout", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("f", "fixed")
            ])),
    },
    Rule {
            matcher: "Ta",
            name: "Text align",
            param_tovalue: false,
            styles: Style::mapped([("text-align", "${0}")]),
            arguments: Some(HashMap::from([
                ("c", "center"),("e", "end"),("end", "right"),("j", "justify"),("mp", "match-parent"),("s", "start"),("start", "left")
            ])),
    },
    Rule {
            matcher: "Tal",
            name: "Text align last",
            param_tovalue: false,
            styles: Style::mapped([("text-align-last", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("c", "center"),("e", "end"),("end", "right"),("j", "justify"),("s", "start"),("start", "left")
            ])),
    },
    Rule {
            matcher: "Td",
            name: "Text decoration",
            param_tovalue: false,
            styles: Style::mapped([("text-decoration", "${0}")]),
            arguments: Some(HashMap::from([
                ("lt", "line-through"),("n", "none"),("o", "overline"),("u", "underline")
            ])),
    },
    Rule {
            matcher: "Ti",
            name: "Text indent",
            param_tovalue: true,
            styles: Style::mapped([("text-indent", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Tov",
            name: "Text overflow",
            param_tovalue: false,
            styles: Style::mapped([("text-overflow", "${0}")]),
            arguments: Some(HashMap::from([
                ("c", "clip"),("e", "ellipsis")
            ])),
    },
    Rule {
            matcher: "Tren",
            name: "Text rendering",
            param_tovalue: false,
            styles: Style::mapped([("text-rendering", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto"),("os", "optimizeSpeed"),("ol", "optimizeLegibility"),("gp", "geometricPrecision")
            ])),
    },
    Rule {
            matcher: "Tr",
            name: "Text replace",
            param_tovalue: false,
            styles: Style::mapped([("text-replace", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none")
            ])),
    },
    Rule {
            matcher: "Tt",
            name: "Text transform",
            param_tovalue: false,
            styles: Style::mapped([("text-transform", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none"),("c", "capitalize"),("u", "uppercase"),("l", "lowercase")
            ])),
    },
    Rule {
            matcher: "Tsh",
            name: "Text shadow",
            param_tovalue: false,
            styles: Style::mapped([("text-shadow", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none")
            ])),
    },
    Rule {
            matcher: "Trf",
            name: "Transform",
            param_tovalue: false,
            styles: Style::mapped([("transform", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Trfo",
            name: "Transform origin",
            param_tovalue: true,
            styles: Style::mapped([("transform-origin", "${0} ${1}")]),
            arguments: Some(HashMap::from([
                ("t", "top"),("end", "right"),("bottom", "bottom"),("start", "left"),("c", "center")
            ])),
    },
    Rule {
            matcher: "Trfs",
            name: "Transform style",
            param_tovalue: false,
            styles: Style::mapped([("transform-style", "${0}")]),
            arguments: Some(HashMap::from([
                ("f", "flat"),("p", "preserve-3d")
            ])),
    },
    Rule {
            matcher: "Prs",
            name: "Perspective",
            param_tovalue: true,
            styles: Style::mapped([("perspective", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "none")
            ])),
    },
    Rule {
            matcher: "Prso",
            name: "Perspective origin",
            param_tovalue: true,
            styles: Style::mapped([("perspective-origin", "${0} ${1}")]),
            arguments: Some(HashMap::from([
                ("t", "top"),("end", "right"),("bottom", "bottom"),("start", "left"),("c", "center")
            ])),
    },
    Rule {
            matcher: "Bfv",
            name: "Backface visibility",
            param_tovalue: false,
            styles: Style::mapped([("backface-visibility", "${0}")]),
            arguments: Some(HashMap::from([
                ("h", "hidden"),("v", "visible")
            ])),
    },
    Rule {
            matcher: "Matrix",
            name: "Matrix (transform)",
            param_tovalue: false,
            styles: Style::mapped([("transform", "matrix(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Matrix3d",
            name: "Matrix 3d (transform)",
            param_tovalue: false,
            styles: Style::mapped([("transform", "matrix(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Rotate",
            name: "Rotate (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "rotate(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Rotate3d",
            name: "Rotate 3d (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "rotate3d(${0},${1},${2},${3})")]),
            arguments: None
    },
    Rule {
            matcher: "RotateX",
            name: "RotateX (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "rotateX(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "RotateY",
            name: "RotateY (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "rotateY(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "RotateZ",
            name: "RotateZ (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "rotateZ(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Scale",
            name: "Scale (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "scale(${0},${1})")]),
            arguments: None
    },
    Rule {
            matcher: "Scale3d",
            name: "Scale 3d (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "scale3d(${0},${1},${2})")]),
            arguments: None
    },
    Rule {
            matcher: "ScaleX",
            name: "ScaleX (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "scaleX(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "ScaleY",
            name: "ScaleY (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "scaleY(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Skew",
            name: "Skew (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "skew(${0},${1})")]),
            arguments: None
    },
    Rule {
            matcher: "SkewX",
            name: "SkewX (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "skewX(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "SkewY",
            name: "SkewY (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "skewY(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Translate",
            name: "Translate (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "translate(${0},${1})")]),
            arguments: None
    },
    Rule {
            matcher: "Translate3d",
            name: "Translate 3d (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "translate3d(${0},${1},${2})")]),
            arguments: None
    },
    Rule {
            matcher: "TranslateX",
            name: "Translate X (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "translateX(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "TranslateY",
            name: "Translate Y (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "translateY(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "TranslateZ",
            name: "Translate Z (transform)",
            param_tovalue: true,
            styles: Style::mapped([("transform", "translateZ(${0})")]),
            arguments: None
    },
    Rule {
            matcher: "Trs",
            name: "Transition",
            param_tovalue: false,
            styles: Style::mapped([("transition", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Trsde",
            name: "Transition delay",
            param_tovalue: true,
            styles: Style::mapped([("transition-delay", "${0}")]),
            arguments: Some(HashMap::from([
                ("i", "initial")
            ])),
    },
    Rule {
            matcher: "Trsdu",
            name: "Transition duration",
            param_tovalue: true,
            styles: Style::mapped([("transition-duration", "${0}")]),
            arguments: None
    },
    Rule {
            matcher: "Trsp",
            name: "Transition property",
            param_tovalue: false,
            styles: Style::mapped([("transition-property", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "all")
            ])),
    },
    Rule {
            matcher: "Trstf",
            name: "Transition timing function",
            param_tovalue: false,
            styles: Style::mapped([("transition-timing-function", "${0}")]),
            arguments: Some(HashMap::from([
                ("e", "ease"),("ei", "ease-in"),("eo", "ease-out"),("eio", "ease-in-out"),("l", "linear"),("ss", "step-start"),("se", "step-end")
            ])),
    },
    Rule {
            matcher: "Us",
            name: "User select",
            param_tovalue: false,
            styles: Style::mapped([("user-select", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "all"),("el", "element"),("els", "elements"),("n", "none"),("t", "text"),("to", "toggle")
            ])),
    },
    Rule {
            matcher: "Va",
            name: "Vertical align",
            param_tovalue: true,
            styles: Style::mapped([("vertical-align", "${0}")]),
            arguments: Some(HashMap::from([
                ("b", "bottom"),("bl", "baseline"),("m", "middle"),("sub", "sub"),("sup", "super"),("t", "top"),("tb", "text-bottom"),("tt", "text-top")
            ])),
    },
    Rule {
            matcher: "V",
            name: "Visibility",
            param_tovalue: false,
            styles: Style::mapped([("visibility", "${0}")]),
            arguments: Some(HashMap::from([
                ("v", "visible"),("h", "hidden"),("c", "collapse")
            ])),
    },
    Rule {
            matcher: "Whs",
            name: "White space",
            param_tovalue: false,
            styles: Style::mapped([("white-space", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "normal"),("p", "pre"),("nw", "nowrap"),("pw", "pre-wrap"),("pl", "pre-line")
            ])),
    },
    Rule {
            matcher: "Whsc",
            name: "White space collapse",
            param_tovalue: false,
            styles: Style::mapped([("white-space-collapse", "${0}")]),
            arguments: Some(HashMap::from([
                ("n", "normal"),("ka", "keep-all"),("l", "loose"),("bs", "break-strict"),("ba", "break-all")
            ])),
    },
    Rule {
            matcher: "W",
            name: "Width",
            param_tovalue: true,
            styles: Style::mapped([("width", "${0}")]),
            arguments: Some(HashMap::from([
                ("0", "0"),("a", "auto"),("bb", "border-box"),("cb", "content-box"),("av", "available"),("minc", "min-content"),("maxc", "max-content"),("fc", "fit-content")
            ])),
    },
    Rule {
            matcher: "Wob",
            name: "Word break",
            param_tovalue: false,
            styles: Style::mapped([("word-break", "${0}")]),
            arguments: Some(HashMap::from([
                ("ba", "break-all"),("ka", "keep-all"),("n", "normal")
            ])),
    },
    Rule {
            matcher: "Wow",
            name: "Word wrap",
            param_tovalue: false,
            styles: Style::mapped([("word-wrap", "${0}")]),
            arguments: Some(HashMap::from([
                ("bw", "break-word"),("n", "normal")
            ])),
    },
    Rule {
            matcher: "Z",
            name: "Z index",
            param_tovalue: true,
            styles: Style::mapped([("z-index", "${0}")]),
            arguments: Some(HashMap::from([
                ("a", "auto")
            ])),
    },
    Rule {
            matcher: "Fill",
            name: "Fill (SVG)",
            param_tovalue: false,
            styles: Style::mapped([("fill", "${0}")]),
            arguments: Some(HashMap::from([
                ("t", "transparent"),("cc", "currentColor"),("n", "none"),("aliceblue", "aliceblue"),("antiquewhite", "antiquewhite"),("aqua", "aqua"),("aquamarine", "aquamarine"),("azure", "azure"),("beige", "beige"),("bisque", "bisque"),("black", "black"),("blanchedalmond", "blanchedalmond"),("blue", "blue"),("blueviolet", "blueviolet"),("brown", "brown"),("burlywood", "burlywood"),("cadetblue", "cadetblue"),("chartreuse", "chartreuse"),("chocolate", "chocolate"),("coral", "coral"),("cornflowerblue", "cornflowerblue"),("cornsilk", "cornsilk"),("crimson", "crimson"),("cyan", "cyan"),("darkblue", "darkblue"),("darkcyan", "darkcyan"),("darkgoldenrod", "darkgoldenrod"),("darkgray", "darkgray"),("darkgreen", "darkgreen"),("darkgrey", "darkgrey"),("darkkhaki", "darkkhaki"),("darkmagenta", "darkmagenta"),("darkolivegreen", "darkolivegreen"),("darkorange", "darkorange"),("darkorchid", "darkorchid"),("darkred", "darkred"),("darksalmon", "darksalmon"),("darkseagreen", "darkseagreen"),("darkslateblue", "darkslateblue"),("darkslategray", "darkslategray"),("darkslategrey", "darkslategrey"),("darkturquoise", "darkturquoise"),("darkviolet", "darkviolet"),("deeppink", "deeppink"),("deepskyblue", "deepskyblue"),("dimgray", "dimgray"),("dimgrey", "dimgrey"),("dodgerblue", "dodgerblue"),("firebrick", "firebrick"),("floralwhite", "floralwhite"),("forestgreen", "forestgreen"),("fuchsia", "fuchsia"),("gainsboro", "gainsboro"),("ghostwhite", "ghostwhite"),("gold", "gold"),("goldenrod", "goldenrod"),("gray", "gray"),("green", "green"),("greenyellow", "greenyellow"),("grey", "grey"),("honeydew", "honeydew"),("hotpink", "hotpink"),("indianred", "indianred"),("indigo", "indigo"),("ivory", "ivory"),("khaki", "khaki"),("lavender", "lavender"),("lavenderblush", "lavenderblush"),("lawngreen", "lawngreen"),("lemonchiffon", "lemonchiffon"),("lightblue", "lightblue"),("lightcoral", "lightcoral"),("lightcyan", "lightcyan"),("lightgoldenrodyellow", "lightgoldenrodyellow"),("lightgray", "lightgray"),("lightgreen", "lightgreen"),("lightgrey", "lightgrey"),("lightpink", "lightpink"),("lightsalmon", "lightsalmon"),("lightseagreen", "lightseagreen"),("lightskyblue", "lightskyblue"),("lightslategray", "lightslategray"),("lightslategrey", "lightslategrey"),("lightsteelblue", "lightsteelblue"),("lightyellow", "lightyellow"),("lime", "lime"),("limegreen", "limegreen"),("linen", "linen"),("magenta", "magenta"),("maroon", "maroon"),("mediumaquamarine", "mediumaquamarine"),("mediumblue", "mediumblue"),("mediumorchid", "mediumorchid"),("mediumpurple", "mediumpurple"),("mediumseagreen", "mediumseagreen"),("mediumslateblue", "mediumslateblue"),("mediumspringgreen", "mediumspringgreen"),("mediumturquoise", "mediumturquoise"),("mediumvioletred", "mediumvioletred"),("midnightblue", "midnightblue"),("mintcream", "mintcream"),("mistyrose", "mistyrose"),("moccasin", "moccasin"),("navajowhite", "navajowhite"),("navy", "navy"),("oldlace", "oldlace"),("olive", "olive"),("olivedrab", "olivedrab"),("orange", "orange"),("orangered", "orangered"),("orchid", "orchid"),("palegoldenrod", "palegoldenrod"),("palegreen", "palegreen"),("paleturquoise", "paleturquoise"),("palevioletred", "palevioletred"),("papayawhip", "papayawhip"),("peachpuff", "peachpuff"),("peru", "peru"),("pink", "pink"),("plum", "plum"),("powderblue", "powderblue"),("purple", "purple"),("red", "red"),("rosybrown", "rosybrown"),("royalblue", "royalblue"),("saddlebrown", "saddlebrown"),("salmon", "salmon"),("sandybrown", "sandybrown"),("seagreen", "seagreen"),("seashell", "seashell"),("sienna", "sienna"),("silver", "silver"),("skyblue", "skyblue"),("slateblue", "slateblue"),("slategray", "slategray"),("slategrey", "slategrey"),("snow", "snow"),("springgreen", "springgreen"),("steelblue", "steelblue"),("tan", "tan"),("teal", "teal"),("thistle", "thistle"),("tomato", "tomato"),("turquoise", "turquoise"),("violet", "violet"),("wheat", "wheat"),("white", "white"),("whitesmoke", "whitesmoke"),("yellow", "yellow"),("yellowgreen", "yellowgreen")
            ])),
    },
    Rule {
            matcher: "Stk",
            name: "Stroke (SVG)",
            param_tovalue: false,
            styles: Style::mapped([("stroke", "${0}")]),
            arguments: Some(HashMap::from([
                ("t", "transparent"),("cc", "currentColor"),("n", "none"),("aliceblue", "aliceblue"),("antiquewhite", "antiquewhite"),("aqua", "aqua"),("aquamarine", "aquamarine"),("azure", "azure"),("beige", "beige"),("bisque", "bisque"),("black", "black"),("blanchedalmond", "blanchedalmond"),("blue", "blue"),("blueviolet", "blueviolet"),("brown", "brown"),("burlywood", "burlywood"),("cadetblue", "cadetblue"),("chartreuse", "chartreuse"),("chocolate", "chocolate"),("coral", "coral"),("cornflowerblue", "cornflowerblue"),("cornsilk", "cornsilk"),("crimson", "crimson"),("cyan", "cyan"),("darkblue", "darkblue"),("darkcyan", "darkcyan"),("darkgoldenrod", "darkgoldenrod"),("darkgray", "darkgray"),("darkgreen", "darkgreen"),("darkgrey", "darkgrey"),("darkkhaki", "darkkhaki"),("darkmagenta", "darkmagenta"),("darkolivegreen", "darkolivegreen"),("darkorange", "darkorange"),("darkorchid", "darkorchid"),("darkred", "darkred"),("darksalmon", "darksalmon"),("darkseagreen", "darkseagreen"),("darkslateblue", "darkslateblue"),("darkslategray", "darkslategray"),("darkslategrey", "darkslategrey"),("darkturquoise", "darkturquoise"),("darkviolet", "darkviolet"),("deeppink", "deeppink"),("deepskyblue", "deepskyblue"),("dimgray", "dimgray"),("dimgrey", "dimgrey"),("dodgerblue", "dodgerblue"),("firebrick", "firebrick"),("floralwhite", "floralwhite"),("forestgreen", "forestgreen"),("fuchsia", "fuchsia"),("gainsboro", "gainsboro"),("ghostwhite", "ghostwhite"),("gold", "gold"),("goldenrod", "goldenrod"),("gray", "gray"),("green", "green"),("greenyellow", "greenyellow"),("grey", "grey"),("honeydew", "honeydew"),("hotpink", "hotpink"),("indianred", "indianred"),("indigo", "indigo"),("ivory", "ivory"),("khaki", "khaki"),("lavender", "lavender"),("lavenderblush", "lavenderblush"),("lawngreen", "lawngreen"),("lemonchiffon", "lemonchiffon"),("lightblue", "lightblue"),("lightcoral", "lightcoral"),("lightcyan", "lightcyan"),("lightgoldenrodyellow", "lightgoldenrodyellow"),("lightgray", "lightgray"),("lightgreen", "lightgreen"),("lightgrey", "lightgrey"),("lightpink", "lightpink"),("lightsalmon", "lightsalmon"),("lightseagreen", "lightseagreen"),("lightskyblue", "lightskyblue"),("lightslategray", "lightslategray"),("lightslategrey", "lightslategrey"),("lightsteelblue", "lightsteelblue"),("lightyellow", "lightyellow"),("lime", "lime"),("limegreen", "limegreen"),("linen", "linen"),("magenta", "magenta"),("maroon", "maroon"),("mediumaquamarine", "mediumaquamarine"),("mediumblue", "mediumblue"),("mediumorchid", "mediumorchid"),("mediumpurple", "mediumpurple"),("mediumseagreen", "mediumseagreen"),("mediumslateblue", "mediumslateblue"),("mediumspringgreen", "mediumspringgreen"),("mediumturquoise", "mediumturquoise"),("mediumvioletred", "mediumvioletred"),("midnightblue", "midnightblue"),("mintcream", "mintcream"),("mistyrose", "mistyrose"),("moccasin", "moccasin"),("navajowhite", "navajowhite"),("navy", "navy"),("oldlace", "oldlace"),("olive", "olive"),("olivedrab", "olivedrab"),("orange", "orange"),("orangered", "orangered"),("orchid", "orchid"),("palegoldenrod", "palegoldenrod"),("palegreen", "palegreen"),("paleturquoise", "paleturquoise"),("palevioletred", "palevioletred"),("papayawhip", "papayawhip"),("peachpuff", "peachpuff"),("peru", "peru"),("pink", "pink"),("plum", "plum"),("powderblue", "powderblue"),("purple", "purple"),("red", "red"),("rosybrown", "rosybrown"),("royalblue", "royalblue"),("saddlebrown", "saddlebrown"),("salmon", "salmon"),("sandybrown", "sandybrown"),("seagreen", "seagreen"),("seashell", "seashell"),("sienna", "sienna"),("silver", "silver"),("skyblue", "skyblue"),("slateblue", "slateblue"),("slategray", "slategray"),("slategrey", "slategrey"),("snow", "snow"),("springgreen", "springgreen"),("steelblue", "steelblue"),("tan", "tan"),("teal", "teal"),("thistle", "thistle"),("tomato", "tomato"),("turquoise", "turquoise"),("violet", "violet"),("wheat", "wheat"),("white", "white"),("whitesmoke", "whitesmoke"),("yellow", "yellow"),("yellowgreen", "yellowgreen")
            ])),
    },
    Rule {
            matcher: "Stkw",
            name: "Stroke width (SVG)",
            param_tovalue: true,
            styles: Style::mapped([("stroke-width", "${0}")]),
            arguments: Some(HashMap::from([
                ("i", "inherit")
            ])),
    },
    Rule {
            matcher: "Stklc",
            name: "Stroke linecap (SVG)",
            param_tovalue: false,
            styles: Style::mapped([("stroke-linecap", "${0}")]),
            arguments: Some(HashMap::from([
                ("i", "inherit"),("b", "butt"),("r", "round"),("s", "square")
            ])),
    },
    Rule {
            matcher: "Stklj",
            name: "Stroke linejoin (SVG)",
            param_tovalue: false,
            styles: Style::mapped([("stroke-linejoin", "${0}")]),
            arguments: Some(HashMap::from([
                ("i", "inherit"),("b", "bevel"),("r", "round"),("m", "miter")
            ])),
    },